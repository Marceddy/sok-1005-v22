labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
# Oppgave 1
df2 %>%
rename(Stat=name) %>%
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point(colour= "green3") +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
# Oppgave 1
df2 %>%
rename(Stat=name) %>%
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point(colour= "green4") +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
# Oppgave 1
df2 %>%
rename(Stat=name) %>%
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point(size = 4, shape = 21, col="aquamarine3", fill = "aquamarine4", stroke = 0.1, alpha = 1) +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
# Oppgave 1
df2 %>%
rename(Stat=name) %>%
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point(size = 2, shape = 21, col="aquamarine3", fill = "aquamarine4", stroke = 0.1, alpha = 1) +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
# Oppgave 1
df2 %>%
rename(Stat=name) %>%
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point(size = 2, shape = 21, col="aquamarine3", fill = "green", stroke = 0.1, alpha = 1) +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
# Oppgave 1
df2 %>%
rename(Stat=name) %>%
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point() +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
# Oppgave 1
df2 %>%
rename(Stat=name) %>%
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point(col="aquamarine3") +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
# Oppgave 1
df2 %>%
rename(Stat=name) %>%
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point(col="aquamarine3") +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
annotate("text", x= 60, y =17,
label = "       ü¢Ñ Lavere andel vaksinerte,
h√∏yere antall d√∏de",
col = "black",
size = 4) +
annotate("text", x= 73, y =9,
label = "       ü¢Ü H√∏yere andel vaksinerte,
lavere antall d√∏de",
col = "black",
size = 4)+
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
# Oppgave 1
df2 %>%
rename(Stat=name) %>%
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point(col="aquamarine3") +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
df2 %>%
rename(Stat=name) %>%
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point() +
geom_smooth(method = lm) +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
data <- fromJSON("https://static01.nyt.com/newsgraphics/2021/12/20/us-coronavirus-deaths-2021/ff0adde21623e111d8ce103fedecf7ffc7906264/scatter.json")
data %>%
mutate(Abbr = state.abb[match(name,state.name)]) %>%
data[is.na(data2)] = "D.C" %>%
# Oppgave 1
rename(Stat=name) %>%
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point(col="aquamarine3") +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
data %>%
mutate(Abbr = state.abb[match(name,state.name)]) %>%
data[is.na(data2)] = "D.C" %>%
rename(Stat=name) %>%
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point(col="aquamarine3") +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
# Oppgave 1
data %>%
mutate(Abbr = state.abb[match(name,state.name)]) %>%
data[is.na(data2)] = "D.C" %>%
rename(Stat=name) %>%
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point(col="aquamarine3") +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
# Oppgave 1
data %>%
mutate(Abbr = state.abb[match(name,state.name)]) %>%
data[is.na(data2)] = "D.C" %>%
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point(col="aquamarine3") +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
data <- fromJSON("https://static01.nyt.com/newsgraphics/2021/12/20/us-coronavirus-deaths-2021/ff0adde21623e111d8ce103fedecf7ffc7906264/scatter.json")
# Oppgave 1
data %>%
mutate(Abbr = state.abb[match(name,state.name)]) %>%
data[is.na(data2)] = "D.C" %>%
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point(col="aquamarine3") +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
# Oppgave 1
data %>%
mutate(Abbr = state.abb[match(name,state.name)])
data[is.na(data2)] = "D.C"
data[is.na(data)] = "D.C"
data %>%
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point(col="aquamarine3") +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
# Oppgave 1
data %>%
mutate(Abbr = state.abb[match(name,state.name)])
data[is.na(data)] = "D.C"
data %>%
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point(col="aquamarine3") +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
# Oppgave 1
data %>%
mutate(Abbr = state.abb[match(name,state.name)]) %>%
data[is.na(data)] = "D.C"  %>%
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point(col="aquamarine3") +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
# Oppgave 1
data %>%
mutate(Abbr = state.abb[match(name,state.name)]) %>%
data[is.na(data)] = "D.C" +
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point(col="aquamarine3") +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
# Oppgave 1
df2 %>%
rename(Stat=name) %>%
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point(col="aquamarine") +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
data1 <- fromJSON("https://static01.nyt.com/newsgraphics/2021/12/20/us-coronavirus-deaths-2021/ff0adde21623e111d8ce103fedecf7ffc7906264/scatter.json")
data2 <- data1 %>%
mutate(Abbr = state.abb[match(name,state.name)])
data2[is.na(data2)] = "D.C"
# Oppgave 1
data2 %>%
rename(Stat=name) %>%
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point(col="aquamarine") +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
lm(deaths_per_100k ~ fully_vaccinated_pct_of_pop, data = data2)
data2 %>%
rename(Stat=name) %>%
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point() +
geom_smooth(method = lm) +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
# Oppgave 1
data2 %>%
rename(Stat=name) %>%
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point(col="aquamarine4") +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
data2 %>%
rename(Stat=name) %>%
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point(col="aquamarine4") +
geom_smooth(method = lm) +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
data <- fromJSON("https://static01.nyt.com/newsgraphics/2021/12/20/us-coronavirus-deaths-2021/ff0adde21623e111d8ce103fedecf7ffc7906264/scatter.json")
data <- data1 %>%
mutate(Abbr = state.abb[match(name,state.name)])
data[is.na(data)] = "D.C"
data %>%
rename(Stat=name) %>%
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point(col="aquamarine4") +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
lm(deaths_per_100k ~ fully_vaccinated_pct_of_pop, data = data2)
data %>%
rename(Stat=name) %>%
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point(col="aquamarine4") +
geom_smooth(method = lm) +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
data <- data %>%
mutate(Abbr = state.abb[match(name,state.name)])
data[is.na(data)] = "D.C"
data %>%
rename(Stat=name) %>%
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point(col="aquamarine4") +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
lm(deaths_per_100k ~ fully_vaccinated_pct_of_pop, data = data2)
data %>%
rename(Stat=name) %>%
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point(col="aquamarine4") +
geom_smooth(method = lm) +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
setwd("~/Desktop/sok-1005-v22/Mappeoppgave 2")
library(tidyverse)
library(jsonlite)
library(rvest)
library(Countr)
data <- fromJSON("https://static01.nyt.com/newsgraphics/2021/12/20/us-coronavirus-deaths-2021/ff0adde21623e111d8ce103fedecf7ffc7906264/scatter.json")
data <- data %>%
mutate(Abbr = state.abb[match(name,state.name)])
data[is.na(data)] = "D.C"
data %>%
rename(Stat=name) %>%
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point(col="aquamarine4") +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
lm(deaths_per_100k ~ fully_vaccinated_pct_of_pop, data = data2)
data %>%
rename(Stat=name) %>%
ggplot(aes(y = deaths_per_100k, x = fully_vaccinated_pct_of_pop,)) +
geom_point(col="aquamarine4") +
geom_smooth(method = lm) +
labs(title="D√∏dsfall som f√∏lge av Covid-19 i forhold til vaksinerte og uvaksinerte",
x="Andel av total befolkning som er vaksinert",
y="D√∏dsfall pr 100.000") +
geom_text(aes(label=Abbr), size=2, hjust=0, vjust=-1, family="Georgia") +
scale_x_continuous(breaks=scales::breaks_pretty(n=5),labels = scales::percent) +
theme_bw()
View(data)
library(tidyverse)
library(rvest)
library(dplyr)
library(janitor)
library(plotly)
install.packages("janitor")
install.packages("plotly")
library(tidyverse)
library(rvest)
library(dplyr)
library(janitor)
library(plotly)
tall <- "https://www.motor.no/aktuelt/motors-store-vintertest-av-rekkevidde-pa-elbiler/217132"  %>%
read_html() %>%
html_nodes(xpath = '/html/body/article/section/div[4]/div[4]/div[1]/table') %>% # henter inn tabellen ved √• kopiere xpathen fra sidekildenen
html_table(header = 1, fill = TRUE) %>% # setter at f√∏rste rad blir header for hver kolonne
as.data.frame() %>%
filter(!str_detect(Avvik, "x")) %>% # filterer bort de modellene uten data
separate(`WLTP.tall`, sep = "/", into=c("WLTP","kWh")) %>% # Separerer WLTP-tall til to kolonner for √• forenkle og at det ser ryddigere ut
mutate(STOPP = as.numeric(gsub("km", "", STOPP))) %>% #fjerner km for √• kunne gj√∏re det numeric
mutate(WLTP = as.numeric(gsub("km", "", WLTP)))  %>% #fjerner km for √• kunne gj√∏re det numeric
rename("Modell" = Modell..temp..varierte.fra.0..til..10..) %>% # endrer navn p√• titel for √• f√• ggplotly til √• bli penere
ggplot(., aes(x = WLTP, y = STOPP, label = Modell)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, colour = "red")  +
scale_y_continuous(limits = c(200, 700)) +
scale_x_continuous(limits = c(200, 700)) +
ggtitle("Kj√∏reavstand til elbiler. \nTemp. varierte fra 0¬∞ til -10¬∞") +
theme_minimal()
ggplotly(Rekkeviddetall) #henter tabellen gjennom ggplotly for √• kunne se hvilke data hver enkelt plott har.
lm(STOPP ~ WLTP, data = Rekkeviddetall$data)
ggplotly(Rekkeviddetall + geom_smooth(method = lm))
ggplotly(tall) #henter tabellen gjennom ggplotly for √• kunne se hvilke data hver enkelt plott har.
lm(STOPP ~ WLTP, data = tall$data)
ggplotly(tall + geom_smooth(method = lm))
tall <- "https://www.motor.no/aktuelt/motors-store-vintertest-av-rekkevidde-pa-elbiler/217132"  %>%
read_html() %>%
html_nodes(xpath = '/html/body/article/section/div[4]/div[4]/div[1]/table') %>% # henter inn tabellen ved √• kopiere xpathen fra sidekildenen
html_table(header = 1, fill = TRUE) %>% # setter at f√∏rste rad blir header for hver kolonne
as.data.frame() %>%
filter(!str_detect(Avvik, "x")) %>% # filterer bort de modellene uten data
separate(`WLTP.tall`, sep = "/", into=c("WLTP","kWh")) %>% # Separerer WLTP-tall til to kolonner for √• forenkle og at det ser ryddigere ut
mutate(STOPP = as.numeric(gsub("km", "", STOPP))) %>% #fjerner km for √• kunne gj√∏re det numeric
mutate(WLTP = as.numeric(gsub("km", "", WLTP)))  %>% #fjerner km for √• kunne gj√∏re det numeric
rename("Modell" = Modell..temp..varierte.fra.0..til..10..) %>% # endrer navn p√• titel for √• f√• ggplotly til √• bli penere
ggplot(., aes(x = WLTP, y = STOPP, label = Modell)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, colour = "red")  +
scale_y_continuous(limits = c(200, 700)) +
scale_x_continuous(limits = c(200, 700)) +
ggtitle("Kj√∏reavstand til elbiler. \nTempratur varierte fra 0¬∞ til -10¬∞") +
theme_minimal()
tall <- "https://www.motor.no/aktuelt/motors-store-vintertest-av-rekkevidde-pa-elbiler/217132"  %>%
read_html() %>%
html_nodes(xpath = '/html/body/article/section/div[4]/div[4]/div[1]/table') %>% # henter inn tabellen ved √• kopiere xpathen fra sidekildenen
html_table(header = 1, fill = TRUE) %>% # setter at f√∏rste rad blir header for hver kolonne
as.data.frame() %>%
filter(!str_detect(Avvik, "x")) %>% # filterer bort de modellene uten data
separate(`WLTP.tall`, sep = "/", into=c("WLTP","kWh")) %>% # Separerer WLTP-tall til to kolonner for √• forenkle og at det ser ryddigere ut
mutate(STOPP = as.numeric(gsub("km", "", STOPP))) %>% #fjerner km for √• kunne gj√∏re det numeric
mutate(WLTP = as.numeric(gsub("km", "", WLTP)))  %>% #fjerner km for √• kunne gj√∏re det numeric
rename("Modell" = Modell..temp..varierte.fra.0..til..10..) %>% # endrer navn p√• titel for √• f√• ggplotly til √• bli penere
ggplot(., aes(x = WLTP, y = STOPP, label = Modell)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, colour = "red")  +
scale_y_continuous(limits = c(200, 700)) +
scale_x_continuous(limits = c(200, 700)) +
ggtitle("Kj√∏reavstand til elbiler. \nTempratur varierte fra 0¬∞ til -10¬∞") +
theme_minimal()
ggplotly(tall) #henter tabellen gjennom ggplotly for √• kunne se hvilke data hver enkelt plott har.
lm(STOPP ~ WLTP, data = tall$data)
tall <- "https://www.motor.no/aktuelt/motors-store-vintertest-av-rekkevidde-pa-elbiler/217132"  %>%
read_html() %>%
html_nodes(xpath = '/html/body/article/section/div[4]/div[4]/div[1]/table') %>% # henter inn tabellen ved √• kopiere xpathen fra sidekildenen
html_table(header = 1, fill = TRUE) %>% # setter at f√∏rste rad blir header for hver kolonne
as.data.frame() %>%
filter(!str_detect(Avvik, "x")) %>% # filterer bort de modellene uten data
separate(`WLTP.tall`, sep = "/", into=c("WLTP","kWh")) %>% # Separerer WLTP-tall til to kolonner for √• forenkle og at det ser ryddigere ut
mutate(STOPP = as.numeric(gsub("km", "", STOPP))) %>% #fjerner km for √• kunne gj√∏re det numeric
mutate(WLTP = as.numeric(gsub("km", "", WLTP)))  %>% #fjerner km for √• kunne gj√∏re det numeric
rename("Modell" = Modell..temp..varierte.fra.0..til..10..) %>% # endrer navn p√• titel for √• f√• ggplotly til √• bli penere
ggplot(., aes(x = WLTP, y = STOPP, label = Modell)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, colour = "red")  +
scale_y_continuous(limits = c(200, 700)) +
scale_x_continuous(limits = c(200, 700)) +
ggtitle("Kj√∏reavstand til elbiler. \nTempratur varierte fra 0¬∞ til -10¬∞") +
theme_bw
tall <- "https://www.motor.no/aktuelt/motors-store-vintertest-av-rekkevidde-pa-elbiler/217132"  %>%
read_html() %>%
html_nodes(xpath = '/html/body/article/section/div[4]/div[4]/div[1]/table') %>% # henter inn tabellen ved √• kopiere xpathen fra sidekildenen
html_table(header = 1, fill = TRUE) %>% # setter at f√∏rste rad blir header for hver kolonne
as.data.frame() %>%
filter(!str_detect(Avvik, "x")) %>% # filterer bort de modellene uten data
separate(`WLTP.tall`, sep = "/", into=c("WLTP","kWh")) %>% # Separerer WLTP-tall til to kolonner for √• forenkle og at det ser ryddigere ut
mutate(STOPP = as.numeric(gsub("km", "", STOPP))) %>% #fjerner km for √• kunne gj√∏re det numeric
mutate(WLTP = as.numeric(gsub("km", "", WLTP)))  %>% #fjerner km for √• kunne gj√∏re det numeric
rename("Modell" = Modell..temp..varierte.fra.0..til..10..) %>% # endrer navn p√• titel for √• f√• ggplotly til √• bli penere
ggplot(., aes(x = WLTP, y = STOPP, label = Modell)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, colour = "red")  +
scale_y_continuous(limits = c(200, 700)) +
scale_x_continuous(limits = c(200, 700)) +
ggtitle("Kj√∏reavstand til elbiler. \nTempratur varierte fra 0¬∞ til -10¬∞") +
theme_bw()
ggplotly(tall) #henter tabellen gjennom ggplotly for √• kunne se hvilke data hver enkelt plott har.
lm(STOPP ~ WLTP, data = tall$data)
ggplotly(tall + geom_smooth(method = lm))
tall <- "https://www.motor.no/aktuelt/motors-store-vintertest-av-rekkevidde-pa-elbiler/217132"  %>%
read_html() %>%
html_nodes(xpath = '/html/body/article/section/div[4]/div[4]/div[1]/table') %>% # henter inn tabellen ved √• kopiere xpathen fra sidekildenen
html_table(header = 1, fill = TRUE) %>% # setter at f√∏rste rad blir header for hver kolonne
as.data.frame() %>%
filter(!str_detect(Avvik, "x")) %>% # filterer bort de modellene uten data
separate(`WLTP.tall`, sep = "/", into=c("WLTP","kWh")) %>% # Separerer WLTP-tall til to kolonner for √• forenkle og at det ser ryddigere ut
mutate(STOPP = as.numeric(gsub("km", "", STOPP))) %>% #fjerner km for √• kunne gj√∏re det numeric
mutate(WLTP = as.numeric(gsub("km", "", WLTP)))  %>% #fjerner km for √• kunne gj√∏re det numeric
rename("Modell" = Modell..temp..varierte.fra.0..til..10..) %>% # endrer navn p√• titel for √• f√• ggplotly til √• bli penere
ggplot(., aes(x = WLTP, y = STOPP, label = Modell)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, colour = "dark orange")  +
scale_y_continuous(limits = c(200, 700)) +
scale_x_continuous(limits = c(200, 700)) +
ggtitle("Kj√∏reavstand til elbiler. \nTempratur varierte fra 0¬∞ til -10¬∞") +
theme_bw()
ggplotly(tall) #henter tabellen gjennom ggplotly for √• kunne se hvilke data hver enkelt plott har.
lm(STOPP ~ WLTP, data = tall$data)
ggplotly(tall + geom_smooth(method = lm))
