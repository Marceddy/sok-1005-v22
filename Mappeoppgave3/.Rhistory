tall <- "https://www.motor.no/aktuelt/motors-store-vintertest-av-rekkevidde-pa-elbiler/217132"  %>%
read_html() %>%
html_nodes(xpath = '/html/body/article/section/div[4]/div[4]/div[1]/table') %>%
html_table(header = 1, fill = TRUE) %>%
as.data.frame() %>%
filter(!str_detect(Avvik, "x")) %>%
separate(`WLTP.tall`, sep = "/", into=c("WLTP","kWh")) %>%
mutate(STOPP = as.numeric(gsub("km", "", STOPP))) %>%
mutate(WLTP = as.numeric(gsub("km", "", WLTP)))  %>%
rename("Modell" = Modell..temp..varierte.fra.0..til..10..) %>%
ggplot(., aes(x = WLTP, y = STOPP, label = Modell)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, colour = "dark orange")  +
scale_y_continuous(limits = c(200, 700)) +
scale_x_continuous(limits = c(200, 700)) +
ggtitle("Kjøreavstand til elbiler. \nTempratur varierte fra 0° til -10°") +
theme_bw()
ggplotly(tall)
lm(STOPP ~ WLTP, data = tall$data)
tall <- "https://www.motor.no/aktuelt/motors-store-vintertest-av-rekkevidde-pa-elbiler/217132"  %>%
read_html() %>%
html_nodes(xpath = '/html/body/article/section/div[4]/div[4]/div[1]/table') %>%
html_table(header = 1, fill = TRUE) %>%
as.data.frame() %>%
filter(!str_detect(Avvik, "x")) %>%
separate(`WLTP.tall`, sep = "/", into=c("WLTP","kWh")) %>%
mutate(STOPP = as.numeric(gsub("km", "", STOPP))) %>%
mutate(WLTP = as.numeric(gsub("km", "", WLTP)))  %>%
rename("Modell" = Modell..temp..varierte.fra.0..til..10..) %>%
ggplot(., aes(x = WLTP, y = STOPP, label = Modell)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, colour = "dark orange")  +
scale_y_continuous(limits = c(200, 700)) +
scale_x_continuous(limits = c(200, 700)) +
ggtitle("Kjøreavstand til elbiler. \nTempratur varierte fra 0° til -10°") +
theme_bw()
library(tidyverse)
library(rvest)
library(dplyr)
library(janitor)
library(plotly)
tall <- "https://www.motor.no/aktuelt/motors-store-vintertest-av-rekkevidde-pa-elbiler/217132"  %>%
read_html() %>%
html_nodes(xpath = '/html/body/article/section/div[4]/div[4]/div[1]/table') %>%
html_table(header = 1, fill = TRUE) %>%
as.data.frame() %>%
filter(!str_detect(Avvik, "x")) %>%
separate(`WLTP.tall`, sep = "/", into=c("WLTP","kWh")) %>%
mutate(STOPP = as.numeric(gsub("km", "", STOPP))) %>%
mutate(WLTP = as.numeric(gsub("km", "", WLTP)))  %>%
rename("Modell" = Modell..temp..varierte.fra.0..til..10..) %>%
ggplot(., aes(x = WLTP, y = STOPP, label = Modell)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, colour = "dark orange")  +
scale_y_continuous(limits = c(200, 700)) +
scale_x_continuous(limits = c(200, 700)) +
ggtitle("Kjøreavstand til elbiler. \nTempratur varierte fra 0° til -10°") +
theme_bw()
ggplotly(tall)
lm(STOPP ~ WLTP, data = tall$data)
ggplotly(tall + geom_smooth(method = lm))
rm(list=ls())
library(rvest)
library(tidyverse)
library(rlist)
# The URL
browseURL("https://timeplan.uit.no/emne_timeplan.php?sem=22v&module%5B%5D=SOK-1005-1&week=1-20&View=list")
url <-"https://timeplan.uit.no/emne_timeplan.php?sem=22v&module%5B%5D=SOK-1005-1&week=1-20&View=list"
page <- read_html(url)
table <- html_nodes(page, 'table') # one table per week
table <- html_table(table, fill=TRUE) # force them into a list
table[[1]]
dframe <- list.stack(table) # stack the list into a data frame
dframe
# define first row as variable name
colnames(dframe) <- dframe[1,]
dframe
# remove the rows with Dato in it
dframe <- dframe %>% filter(!Dato=="Dato")
str(dframe)
# Separate the Dato into two columns:
dframe <- dframe %>% separate(Dato,
into = c("Dag", "Dato"),
sep = "(?<=[A-Za-z])(?=[0-9])")
# remove last observation (duplicate)
dframe <- dframe[-length(dframe$Dag),]
# code into date format
dframe$Dato <- as.Date(dframe$Dato, format="%d.%m.%Y")
# generate a week variable
dframe$Uke <- strftime(dframe$Dato, format = "%V")
# select
dframe <- dframe %>% select(Dag,Dato,Uke,Tid,Rom)
dframe
str(dframe)
table <- html_nodes(page, 'table') # one table per week
table <- html_table(table, fill=TRUE) # force them into a list
table[[1]]
dframe <- list.stack(table) # stack the list into a data frame
dframe
library(rlist)
install.packages("rlist")
install.packages(c("broom", "cli", "clipr", "colorspace", "countrycode", "crayon", "dplyr", "evaluate", "generics", "ggdendro", "glue", "jsonlite", "leaflet", "lme4", "magrittr", "nlme", "pillar", "Rcpp", "Rdpack", "readr", "reticulate", "rlang", "tidyr", "tidyselect", "tinytex", "VGAM", "yaml"))
install.packages(c("broom", "cli", "clipr", "colorspace", "countrycode", "crayon", "dplyr", "evaluate", "generics", "ggdendro", "glue", "jsonlite", "leaflet", "lme4", "magrittr", "nlme", "pillar", "Rcpp", "Rdpack", "readr", "reticulate", "rlang", "tidyr", "tidyselect", "tinytex", "VGAM", "yaml"))
